@namespace Client.Shared.Components.Dropdown

<div tabindex="0" class="component" @onfocusout="@Hide">
    <div class="option-selected" @onmousedown=@Toggle>
        <input type="text" class="input" title="@ShowPlaceholder()" placeholder="@ShowPlaceholder()" readOnly />
        <div class="button down">
            <i class="@(Open ? "icon_triangule_up" : "icon_triangule_down")" />
        </div>
    </div>
    <div class="options @(Open ? "show" : "hidden")" @onmousedown:preventDefault="true" >
        @foreach (var option in Options)
        {
            <div title="@option.label" class="option">
                @if (MultiSelect)
                {
                    <input @onchange="@(() => SelectOption(option))"
                           @onchange:preventDefault="true"
                           @onmousedown:preventDefault="true"
                           class="checkbox"
                           type="checkbox"
                           id="chk_@option.id.Replace('-', '_')"
                           name="chk_@option.id" />
                }
                <label @onmousedown:preventDefault="true" for="chk_@option.id.Replace('-', '_')" class="name">@option.label</label>
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public ICollection<DropdownOption> Options { get; set; } = new HashSet<DropdownOption>();

    [Parameter]
    public bool MultiSelect { get; set; } = false;

    [Parameter]
    public string DefaultText { get; set; } = "Select your option";

    [Parameter]
    public EventCallback<ICollection<DropdownOption>> OnChange { get; set; }

    public bool Open { get; set; } = false;

    private ICollection<DropdownOption> Selected { get; set; } = new HashSet<DropdownOption>();

    void Toggle() {
        Open = !Open;
    }

    void Hide() {
        Open = false;
    }

    string ShowPlaceholder() => (Selected?.Count > 0 ? string.Join(",", Selected.Select(op => op.label)) : DefaultText);

    private async void SelectOption(DropdownOption option)
    {
        if (MultiSelect)
        {
            if (!(bool)Selected?.Any(op => option.id == op.id))
            {
                Selected.Add(option);
            }
            else {
                Selected = Selected?.Where(op => option.id != op.id).ToList();
            }
        }
        else
        {
            Selected = new List<DropdownOption> { option };
            Toggle();
        }

        await OnChange.InvokeAsync(Selected);
    }
}
