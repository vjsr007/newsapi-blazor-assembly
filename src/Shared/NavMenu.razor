@inject NewsState NewsState
@inject HttpClient Http
@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration
@using Client.Contract
@using Client.Constants

<div class="component">
    <div class="header">
        <label class="title">News API</label>
        <label class="subtitle">Use filters to get articles</label>
    </div>
    <div class="form">
        <CustomLabel Label="Topic"></CustomLabel>
        <CustomInput OnChange=@ChangeTopic></CustomInput>
        <CustomLabel Label="Sources"></CustomLabel>
        <Dropdown DefaultText="Select your sources" MultiSelect=true OnChange="@ChangeSources" Options="@sources"></Dropdown>
        <CustomLabel Label="Dates"></CustomLabel>
        <Dropdown OnChange="@ChangeDates" Options="@dates"></Dropdown>
        <CustomLabel Label="Languages"></CustomLabel>
        <Dropdown OnChange="@ChangeLanguages" Options="@languages"></Dropdown>
        <CustomLabel Label="Sort by"></CustomLabel>
        <Dropdown OnChange="@ChangeSortBy" Options="@sortBy"></Dropdown>
        <Pager OnChange="@ChangeCurrentPage" NumberOfItems="@(NewsState?.NumberOfItems ?? 0)" PageSize="@NewsApiConstants.PAGE_SIZE" ></Pager>
        <CustomButton OnClick="@(async() => await RequestArticle.InvokeAsync())" Label="Search"></CustomButton>
    </div>
</div>

@code {
    [Parameter]
    public EventCallback RequestArticle { get; set; }

    private List<DropdownOption> sources = new List<DropdownOption>();
    private List<DropdownOption> languages = new List<DropdownOption>();
    private List<DropdownOption> dates = new List<DropdownOption>();
    private List<DropdownOption> sortBy = new List<DropdownOption>();

    public void ChangeTopic(string text) => NewsState.SetTopic(text);
    public void ChangeSources(ICollection<DropdownOption> ops) => NewsState.SetSources(ops);
    public void ChangeDates(ICollection<DropdownOption> ops) => NewsState.SetDate(ops);
    public void ChangeLanguages(ICollection<DropdownOption> ops) => NewsState.SetLanguage(ops);
    public void ChangeSortBy(ICollection<DropdownOption> ops) => NewsState.SetSortBy(ops);
    public async void ChangeCurrentPage(int page) {
        NewsState.SetPage(page);
        await RequestArticle.InvokeAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        var url = Configuration["NewsAPI:url"];
        var sourceEndpoint = string.Format(NewsApiConstants.SOURCE_ENDPOINT, url, Configuration["NewsAPI:key"]);
        var response = await Http.GetFromJsonAsync<SourceResponse<Source>>(sourceEndpoint);
        sources.AddRange(response.Sources.Select(item => new DropdownOption { id = item.Id, label = item.Name }).ToList());
        languages.AddRange(await Http.GetFromJsonAsync<ICollection<DropdownOption>>("data/languages.json"));
        dates.AddRange(await Http.GetFromJsonAsync<ICollection<DropdownOption>>("data/dates.json"));
        sortBy.AddRange(await Http.GetFromJsonAsync<ICollection<DropdownOption>>("data/sortBy.json"));
    }
}
